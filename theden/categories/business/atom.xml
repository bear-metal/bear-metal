<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Business | Bear Metal]]></title>
  <link href="https://bearmetal.eu/theden/categories/business/atom.xml" rel="self"/>
  <link href="https://bearmetal.eu/"/>
  <updated>2015-02-12T13:32:39+02:00</updated>
  <id>https://bearmetal.eu/</id>
  <author>
    <name><![CDATA[Bear Metal OÜ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[It's Not About You]]></title>
    <link href="https://bearmetal.eu/theden/its-not-about-you/"/>
    <updated>2015-02-12T13:32:39+02:00</updated>
    <id>https://bearmetal.eu/theden/its-not-about-you</id>
    <content type="html"><![CDATA[<p><em>This is a slightly expanded version of a talk I gave in <a href="http://railsgirls.com/helsinki">Rails Girls Helsinki</a> in February 2015.</em></p>

<p><figure markdown="1">
  <a href="https://www.flickr.com/photos/smemon/11984559914/">
    <img src="https://farm4.staticflickr.com/3728/11984559914_be77fb9031_o_d.png">
  </a></p>

<p>  <figcaption>
    <p>
      Photo by <a href="https://www.flickr.com/photos/smemon/11984559914/">Sean MacEntee</a>, used under a Creative Commons license.
    </p>
  </figcaption>
</figure></p>

<p>I used to suffer from terrible stage fright. I was super nervous every time I presented. I forgot stuff I was supposed to say on stage. I never vomited before a talk, though, I’ll give you that.</p>

<p>It got better over time through lots of practice, but I still get all sweaty and shaky before getting on stage.</p>

<p>Then I recently stumbled upon an article by Kathy Sierra called <a href="http://seriouspony.com/blog/2013/10/4/presentation-skills-considered-harmful">Presentation Skills Considered Harmful</a>. In it she tells about having had similar problems, and how all the tutorials told her what and how you should do to give a good presentation. You, you, you.</p>

<p>Then she realized that a presentation is really a UX. <em>A presentation is just a user experience</em>. You present ideas – hopefully good ones – to your audience. What does this make you, the presenter? A UI. You are just a UI, a user interface. <em>You</em> yourself don’t matter that much. All that matters is that your ideas touch your audience.</p>

<p>Is that bad? No, it’s great. It’s a huge relief. What matters is  not you but what you have to say, the meat of your talk.</p>

<p>And that brings us nicely to the topic of this article.</p>

<p><strong>It’s not about you.</strong></p>

<p>This is maybe the most important thing I’ve learned during the past decade<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. It’s also not only profound, but spans your entire life.</p>

<h2>Writing</h2>

<p>These days, everyone and their cat has a blog.</p>

<p>Most blogs tell about the author, which is totally fine — if the author writes it for themselves or their relatives. But when you think about the most helpful blogs – the ones you go back to all the time – they really aren’t. They are about helping the reader, either by informing them or teaching them new things.</p>

<p><em>But Jarkko</em>, I hear you say. <em>You just started this article with a story about yourself</em>.</p>

<p>That is correct. Storytelling gets kind of an exception.</p>

<p>Except not really. Because storytelling isn’t really about the storyteller, either. You know, we didn’t always know how to write. Telling stories was the only way to pass information to younger generations. Thus, our brains are quite literally wired to react to storytelling. <a href="http://lifehacker.com/5965703/the-science-of-storytelling-why-telling-a-story-is-the-most-powerful-way-to-activate-our-brains">We’re evolutionarily built to learn better from stories</a>.</p>

<p>Thus, stories are not so much about you, the teller, either. Stories are about the listener/reader, and how they relate to the protagonist of the narrative.</p>

<p>And in the end, unless you’re writing fiction, stories are just a tool as well. A powerful one, yes, but just a tool to bring home a lesson to the reader.</p>

<p><em>Because writing is not about you.</em></p>

<p>Cincinnati Enquirer learned this the hard way recently. After they laid off their whole copy desk, they were <em>shocked</em> to find out that readers were outraged about the deteriorating quality of the paper’s articles. John E. McIntyre <a href="http://www.baltimoresun.com/news/language-blog/bal-first-lesson-nobody-cares-20150211-story.html">describes the issue</a> vividly:</p>

<blockquote><p>The reader doesn’t care how hard you worked, what pressures you are under, or how good your intentions are. The reader sees the product, online or in print; if the product looks sloppy and substandard, the reader will form, and likely express, a low opinion of it. And the reader is under no obligation whatsoever to be kind.</p></blockquote>

<p>What the Enquirer forgot was that <em>their writing is really not about them</em>.</p>

<p>But you don’t wanna hear me babble about writing, let’s get to business.</p>

<h2>Business ideas</h2>

<p>Are you still looking for that killer business idea?</p>

<p>Stop.</p>

<p>Ideas are all about you. How to get into business <em>you</em> should – apparently through divine intervention or something – come up with a dazzling idea.</p>

<p><a href="https://unicornfree.com/2013/how-do-you-create-a-product-people-want-to-buy">Ideas are also dangerous</a> because once you get one, it makes you a victim of <a href="http://en.wikipedia.org/wiki/Confirmation_bias">confirmation bias</a>. You’re going to start retrofitting the world to your idea, which is totally backwards.</p>

<p>Instead, find an audience you can relate to and sell to. Then, find about their pains, problems, and ways to help them make more money. Then solve that pain and you’ll do well.</p>

<p>Because – to quote Peter Drucker – the purpose of business is to create and keep a customer. It’s that customer, not you, who is going to decide the fate of your business.</p>

<p><em>Because successful business isn’t about you.</em></p>

<h2>Marketing</h2>

<p>You know what’s special about Apple ads? They almost never list features or specs. Instead, they show what their users can do with them. Shoot video. <em>Facetime</em> with their relatives on the other side of globe. Throw a DJ gig with just an iPad or two.</p>

<p>My friend Amy Hoy has this formula for great sales copy called <a href="https://unicornfree.com/2013/how-i-increased-conversion-2-4x-with-better-copywriting">PDF, for Pain–Dream–Fix</a>:</p>

<ol>
<li>Start with describing the pain your users are having, with crisp, clear words, so that they will go all <em>ahhh, they understand me</em>.</li>
<li>Then flip it around.
 <em>“Imagine a world where you wouldn’t have to manually scan your taxi receipts. Instead, they would magically appear in your accounting system.”</em></li>
<li>And fix.
 <em>“We got you covered. Uberreceipt 9000 will hook up Uber with your accounting and you will never again touch another taxi receipt!”</em></li>
</ol>


<p>Now <em>that</em> is how you make people pay attention.</p>

<p>Because <em>great marketing and sales copy is not about you</em>, either.</p>

<h2>Finally: Product</h2>

<p>Last, and indeed least, we get to the actual product, software in our case.</p>

<p><em>It – as and of itself – is not all that important</em>. Because having a great product is not about you, or the product itself. It’s about solving a customer pain or a job they need to tackle.</p>

<p>Because people don’t buy a quarter-inch drill, they buy a quarter-inch hole in the wall.</p>

<p>By now, you already know the pains of your audience<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Now it’s time to solve them. From previous points, you should already have a nice roadmap to a product people like.</p>

<h2>Extra credit: Make your users kick ass</h2>

<p>For an extra credit, let’s see how we could transform people from liking your product to loving and raving about it.</p>

<p>We started this talk with Kathy Sierra, and we’re going to end it with her as well.</p>

<p>Kathy’s <a href="http://businessofsoftware.org/2013/02/kathy-sierra-building-the-minimum-badass-user-business-of-software-a-masterclass-in-thinking-about-software-product-development/">big idea</a> is that the main purpose of software is to make its users kick ass. What she means by this is that software – or any product really – should help their users to get better at what they do, not just using the product<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<p><em>Screw gamification.</em></p>

<p>Final Cut Pro should not make its users better at using Final Cut Pro. <em>It should make them better film editors.</em></p>

<p><a href="https://www.wodconnect.com">WODConnect</a> should not make its users better at using the app. <em>It should make them stronger and faster.</em></p>

<p>This should happen through <em>everything</em> related to your product. The product itself, its marketing, its manuals, its customer support, everything.</p>

<p>Because your success is not about you or your product.</p>

<p>It’s about the users.</p>

<p>It’s about empathy.</p>

<hr />

<p>Discuss on <a href="https://news.ycombinator.com/item?id=9038804">Hacker News</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Well, let’s just say it’s a tie with learning about the <a href="http://mindsetonline.com">growth mindset</a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>If not, go back to the Business Ideas part above. Do not  – and I can’t stress this enough – start building a product before you are sure it solves a problem people have, know they have, and are willing to pay for.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>All this is also the subject of Kathy’s upcoming book, <a href="http://shop.oreilly.com/product/0636920036593.do">Badass: Making Users Awesome</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Tremendous Scale of AWS and the Hidden Benefit of the Cloud]]></title>
    <link href="https://bearmetal.eu/theden/the-tremendous-scale-of-aws-and-the-hidden-benefit-of-the-cloud/"/>
    <updated>2015-02-03T15:14:35+02:00</updated>
    <id>https://bearmetal.eu/theden/the-tremendous-scale-of-aws-and-the-hidden-benefit-of-the-cloud</id>
    <content type="html"><![CDATA[<p><figure markdown="1">
  <a href="https://www.flickr.com/photos/infomastern/14852324010/">
    <img src="https://farm4.staticflickr.com/3918/14852324010_9a0d2d1887_b.jpg">
  </a></p>

<p>  <figcaption>
    <p>
      Photo by <a href="https://www.flickr.com/photos/infomastern/14852324010/">Susanne Nilsson</a>, used under a Creative Commons license.
    </p>
  </figcaption>
</figure></p>

<p>Finland, 2013. Vantaa, the second largest municipality in Finland buys a new web form for welfare applications from CGI (née Logica, née WM-Data) for a whopping €1.9 million. The story doesn&rsquo;t end there, though. A month later it turns out, that Helsinki has bought the exact same form from CGI as well, for €1.85 million.</p>

<p>Now, you can argue about what is a fair value for a single web form, especially when it has to be integrated to an existing information system. What is clear though, that it is not almost 2 million Euros, twice.</p>

<p>“How on earth was that possible,” I hear you ask. Surely someone would have offered to do that form for, say, 1 million a pop. Heck, even the Finnish law for public procurements mandates public competitive bidding for such projects.</p>

<p>Vendor lock-in. CGI was administering the information system on which the form was to be built. And since they held the key, they could pretty much ask for as much as the municipalities could potentially pay for the form.</p>

<p>Now hold that thought.</p>

<hr />

<p>Over at <a href="http://highscalability.com/blog/2015/1/12/the-stunning-scale-of-aws-and-what-it-means-for-the-future-o.html">High Scalability</a>, Todd Hoff writes about James Hamilton&rsquo;s talk at the AWS re:Invent conference last November. It reveals how gigantic the scale of Amazon Web Services really is:</p>

<blockquote><p>Every day, AWS adds enough new server capacity to support all of Amazon’s global infrastructure when it was a $7B annual revenue enterprise (in 2004).</p></blockquote>

<p>This also means that AWS is leaps and bounds above its competitors when it comes to capacity:</p>

<blockquote><p>All 14 other cloud providers combined have 1/5th the aggregate capacity of AWS (estimate by Gartner)</p></blockquote>

<p>This of course gives AWS a huge benefit compared to its competitors. It can run larger datacenters both close and far from each others; they can get sweetheart deals and custom-made components from Intel for servers, just like Apple does with laptops and desktops. And they can afford to design their own network gear, the one field where the progress hasn&rsquo;t followed the Moore&rsquo;s law. There the only other companies who do the same are other internet giants like Google and Facebook, but they&rsquo;re not in the same business as AWS<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>All this is leading to a situation where <strong>AWS is becoming the IBM of the 21st century</strong>, for better or for worse. Just like no one ever got fired for buying IBM in the 80&rsquo;s, few will likely get fired for choosing AWS in the years to come. This will be a tough, tough nut to crack for Amazon&rsquo;s competitors.</p>

<p>So far the situation doesn&rsquo;t seem to have slowed down Amazon&rsquo;s rate of innovation, and perhaps they have learned the lessons of the big blue. Only future will tell.</p>

<p>From a customer&rsquo;s perspective, a cloud platform like AWS brings lots and lots of benefits – well listed in the article above – but of course also downsides. Computing power is still much cheaper when bought in physical servers. You can rent a monster Xeon server with basically unlimited bandwidth for less than €100/month. AWS or platforms built on it such as Heroku can&rsquo;t compete with that on price. So if you&rsquo;re very constrained on cash and have the sysadmin chops to operate the server, you will get a better deal.</p>

<p>Of course we&rsquo;re comparing apples and oranges here. You won&rsquo;t get similar redundancy and flexibility with physical servers as you can with AWS for any money – except when you do. The second group where using a commercial cloud platform doesn&rsquo;t make sense is when your scale merits a cloud platform of your own. Open source software for such platforms – such as Docker and Flynn – are slowly at a point where you can rent your own servers and basically build your own AWS on them<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Of course this will take a lot more knowledge from your operations team, especially if you want to attain similar redundancy and high availability that you can with AWS Availability Zones.</p>

<p>There is – however – one hidden benefit of going with a commercial cloud platform such as AWS, that you might not have thought about: <em>going with AWS will lessen your vendor lock-in a lot</em>. Of course you can still shoot yourself in the foot by handing off the intellectual property rights of the software to your vendor or some other braindead move. But given that you won&rsquo;t, hosting is another huge lock-in mechanism large IT houses use to screw their clients. It not only effectively locks the client to the vendor, but it also massively slows down any modifications made by other projects that need to integrate with the existing system, since everything needs to be handled through the vendor. They can, and will, block any progress you could make yourself.</p>

<p>With AWS, you can skip all of that. You are not tied to a particular vendor to develop, operate, and extend your system. While running apps on PaaS platforms requires some specific knowledge, it is widely available and standard. If you want to take your systems to another provider, you can. If you want to build your own cloud platform, you can do it and move your system over bit by bit.</p>

<p>It is thus no wonder that large IT consultancies are racing to build their own platforms, to hit all the necessary buzzword checkboxes. However, I would be very wary of their offerings. I&rsquo;m fairly certain the savings they get from better utilization of their servers by virtualization are not passed on to the customer. And even if some of them are, the lock-in is still there. They have absolutely no incentive to make their platform compatible with the existing ones, quite the contrary. Lock-in is on their side. It is not on your side. Beware.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Apart from Google Computing Engine, but even it doesn&rsquo;t provide a similar generic cloud platform that AWS does.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>If you’re at such a state, we can <a href="https://bearmetal.eu/services/">help</a>, by the way. The same goes for building a server environment on AWS, of course.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Of Course You May Eat Your Own Food Here]]></title>
    <link href="https://bearmetal.eu/theden/of-course-you-may-eat-your-own-food-here/"/>
    <updated>2015-02-02T16:00:18+02:00</updated>
    <id>https://bearmetal.eu/theden/of-course-you-may-eat-your-own-food-here</id>
    <content type="html"><![CDATA[<p>Are you with or against your customers?</p>

<p>Do your signs read like those “Private property. Keep out!” signs? “No eating of own food”. “Food may not be taken out of the restaurant!” Don&rsquo;t you have more important things to care about, like, whether your customers love you?</p>

<p>I recently saw this sign on the outside wall of a small roadside restaurant<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>:</p>

<p><img src="/images/IMG_2928.JPG" alt="" /></p>

<p>It reads: “You may of course eat your own food here as well.”</p>

<p>So, why should you be more like Tiinan Tupa and less like ABC?</p>

<p>First of all, very few people will probably abuse it. Even if someone eats their own lunch packs there, they will probably reciprocate and buy something as a favor to the place.</p>

<p>Second, it is the ultimate <a href="http://www.sethgodin.com/purple/">purple cow</a>. It is something unexpected, something remarkable people will pay attention to. People are so accustomed to passive-aggressive notes forbidding this and that that a sign being actually nice will be noticed and talked about.</p>

<p>Lastly, and most importantly, it&rsquo;s just plain being nice. So stop just using glorious and empty words about how you care about your customers and actually walk the walk.</p>

<p>For these three reasons, being ridiculously admitting with your customers will probably also be good for you in the long term. So stop picking nickels in front of bulldozers. Make sure people will give you money <em>because they love you</em>, not because they <em>have to</em>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Coincidentally, I found it on Vaihtoehto ABC:lle, a site and an app dedicated to finding alternatives to the ubiquitous, generic and boring ABC gas station chain that seems to have infiltrated the whole country in just a couple of years. ABC specifically forbids eating food bought from its own supermarket in the cafeteria of the same gas station.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Do You Know the Biggest Reason for Why Enterprise Software Sucks?]]></title>
    <link href="https://bearmetal.eu/theden/do-you-know-the-biggest-reason-why-enterprise-software-sucks/"/>
    <updated>2014-01-15T11:43:00+02:00</updated>
    <id>https://bearmetal.eu/theden/do-you-know-the-biggest-reason-why-enterprise-software-sucks</id>
    <content type="html"><![CDATA[<p><em>We all know the story. Your company was going to get this big new shiny ERP software. It was going to replace a third of the workforce in the company, cut the costs in half and make everyone happy. In reality the project went two years over schedule, cost three times as much as envisioned, and the end result was a steaming pile of shit.</em></p>

<p><a href="http://www.flickr.com/photos/53326337@N00/8043877054/"><img src="https://farm9.staticflickr.com/8453/8043877054_883963cf80_c.jpg" alt="" /></a></p>

<p><small>Photo by <a href="http://www.flickr.com/photos/53326337@N00/8043877054/">Quinn Dombrowski</a>, used under the Creative Commons license.</small></p>

<p>At this point started the blame-throwing. The provider duped the client with waterfall and exorbitant change fees. The buyer didn&rsquo;t know how to act as a client in an information system project. The specs weren&rsquo;t good/detailed/strict/loose enough. The consultants just weren&rsquo;t that good in the first place. On and on and on.</p>

<p>While one or more of the above invariably are true in failed software projects, there&rsquo;s one issue that almost each and every failed enterprise software project has in common: <em>the buyers were not (going to be) the users of the software</em>.</p>

<p>This simple fact has huge implications. Ever heard that “the client didn&rsquo;t really know what they wanted”? Well, that&rsquo;s because they didn&rsquo;t. Thus, most such software projects are built with something completely different than the end user in mind. Be it the ego of the CTO, his debt to his mason brothers who happen to be in the software business<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, or just the cheapest initial bid<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. In any case, it&rsquo;s in the software provider&rsquo;s best interest to appeal to the decisionmaker, not the people actually using the system.</p>

<p>Of course, not every software buyer is as bad as described above. Many truly care about the success of the system and even its users. If for no other reason, at least because it has a direct effect on the company&rsquo;s bottom line. But even then, they just don&rsquo;t have the first-hand experience of working in the daily churn. They simply can&rsquo;t know what&rsquo;s best for the users. Of course, this gets even worse in the design-by-committee, big-spec-upfront projects.</p>

<p>Since it&rsquo;s not very likely that we could change the process of making large software project purchases any time soon, what can we as software vendors do? One word: <em>empathy</em>. If you just take a spec and implement it with no questions asked, shame on you. You deserve all the blame. Your job is not to implement what the spec says. Heck, your job isn&rsquo;t even to create what the client wants. Your job is to build what the client – no, the end users – need. For this – no matter how blasphemous it might sound to an engineer – you have to actually <em>talk</em> to the people that will be using your software.</p>

<p>This is why it&rsquo;s so important to put the software developers to actually do what the end-users would. <strong>If you&rsquo;re building call-center software, make the developers work in the call center a day or a week. If you&rsquo;re building web apps, make the developers and designers work the support queue, don&rsquo;t just outsource it to India.</strong></p>

<p>There is no better way to understand the needs for software you&rsquo;re building than to talk directly to its users or use it yourself for real, in a real-life situation. While there aren&rsquo;t that many opportunities to dog-fooding when building (perhaps internal) enterprise software for a client, there&rsquo;s nothing preventing you from sending your people to the actual cost center. Nothing will give as much insight to the needs and pains of the actual users. No spec will ever give you as broad a picture. No technical brilliance will ever make up for lacking domain knowledge. And no client will ever love you as much as the one in the project where you threw yourself (even without being asked) on the line of fire. That&rsquo;s what we here at Bear Metal insist on doing at the start of every project. I think you should, too.</p>

<hr />

<p><em>We at Bear Metal have some availability open for short and mid-term projects. If you&rsquo;re looking for help building, running, scaling or marketing your web app,  <a href="mailto:info@bearmetal.eu">get in touch</a>.</em></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>It&rsquo;s surprising how often the same people actually represent both the buyer and the seller. This happens all the time e.g. in the patient care systems projects.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Nevermind that the cheapest initial bid almost always balloons to something completely different in the end.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Are You Flying Blind – How to Regain Control of Production Systems With the Help of Situation Awareness?]]></title>
    <link href="https://bearmetal.eu/theden/situation-awareness/"/>
    <updated>2013-09-03T16:57:00+03:00</updated>
    <id>https://bearmetal.eu/theden/situation-awareness</id>
    <content type="html"><![CDATA[<p><figure markdown="1">
  <a href="http://www.flickr.com/photos/robbn1/3391187126/">
    <img src="https://farm4.staticflickr.com/3454/3391187126_4e62f6a374_b.jpg">
  </a></p>

<p>  <figcaption>
    <p>
      Photo by <a href="http://www.flickr.com/photos/robbn1/3391187126/">Robb North</a>
    </p>
  </figcaption>
</figure></p>

<p>A few months of work during a sabbatical yielded a product that nailed a problem in the preventative healthcare space. After a freemium window, the product gained good market traction and you spawn a new company with three coworkers. Customers are raving, sales trends are on the up, the engineering team is growing and there are conceptual products in the pipeline.</p>

<p>Three months down the line, there are 4 production applications, hordes of paying customers, a few big contracts with strict SLAs (service-level agreements) and enough resources to spin off a presence in Europe. A new feature that combines these products into a suite is slated for release. Engineering hauled ass for 2 months and sales is super stoked to be able to pitch it to customers.</p>

<h2>Shipping</h2>

<p>A few days before the feature release a set of new servers is provisioned to buffer against the upcoming marketing push. Due diligence on various fronts was completed, mostly through static analysis of the current production stack by various individuals. Saturday morning at 1am PST they deploy during a window with a historically low transaction volume. Representatives of a few departments sign off on the release, although admittedly there are still dark corners and the OK is mostly based off a few QA passes. Champagne pops, drinks are being had and everyone calls it a day. But then&hellip;</p>

<h2>When things go south</h2>

<p>At 9am PST various alerts flood the European operations team - only 25% of the platform&rsquo;s available, support is overwhelmed and stress levels go up across the board. Some public facing pages load intermittently, MySQL read load is sky high and application log streams are blank. This deployment, as with most naive releases, was flying blind. A snapshot of a working system prior to release isn&rsquo;t of much value if it can&rsquo;t be easily reproduced after rollout for comparison.</p>

<p>Based on assumptions about time, space and other variables there was a total lack of <strong>situation awareness</strong> and thus no visibility into expected impact of these changes. Running software that pays the bills is today more important than a flashy new feature. However, one must move forward and there are processes and tools available for mitigating risk.</p>

<h2>What is situation awareness?</h2>

<p>Situation awareness can be defined as an engineering team&rsquo;s knowledge of both the internal and external states of their production systems, as well as the environment in which it is operating. Internal states refer to health checks, statistics and other monitoring info. The external environment refers to things we generally can&rsquo;t directly control: Humans and their reactions; hosting providers and their networks; acts of god and other environmental issues.</p>

<p>It&rsquo;s thus <em>a snapshot in time of system status that provides the primary basis for decision making and operation of complex systems</em>. Experience with a given system gives team members the ability to remain aware of everything that is happening concurrently and to integrate that sense of awareness into what they&rsquo;re doing at any moment.</p>

<h2>How situation awareness could have helped?</h2>

<p>The new feature created a dependency tree between 4 existing applications, a lightweight data synchronization service (Redis) and the new nodes that were spun up. Initial investigation and root cause analysis revealed that the following went wrong:</p>

<ul>
<li>The Redis server was configured for only 1024 connections and it tanked over when backends warmed up as the client connection was lazily initialized.</li>
<li>Initial data synchronization (cache warmup) put excessive load on MySQL and other data stores also used for customer facing reporting.</li>
<li>The data payloads used for synchronization were often very large for outlier customers, effectively blocking the Redis server&rsquo;s event loop, also causing memory pressure.</li>
<li>The new nodes were spun up with a wrong Ruby major version and also missed critical packages required for normal operations.</li>
<li>A new feature that rolls the &ldquo;logger&rdquo; utility into some core init scripts piggybacked on this release. A syntax error fubar&#8217;ed output redirection and thus there weren&rsquo;t any log streams.</li>
</ul>


<p>Without much runtime introspection in place, it was very difficult to predict what the release impact would be. Although not everything could be covered ahead of time for this release, even with basic runtime analysis, monitoring and good logging it would have been possible to spot trends and avoid issues bubbling up systematically many hours later.</p>

<p>Another core issue here is the &ldquo;low traffic&rdquo; release window. It&rsquo;s often considered good practice to release during such times to minimize fallout for the worst case, however it&rsquo;s sort of akin to commercial Boeing pilots only training on Cessnas. Any residual and overlooked issues tend to also only surface hours later when traffic ramps up again. This divide between cause and effect complicates root cause analysis immensely. You&rsquo;d want to be able to infer errors from the system state, worst case QA or an employee and most definitely not customers interacting with your product at 9am.</p>

<p>One also cannot overlook the fact that suddenly each team now had a direct link with at least 3 other applications, new (misconfigured) backends and Redis at this point in time. Each team however only still mostly had a mental model of a single isolated application.</p>

<h2>Why situation awareness is so important?</h2>

<p>We at Bear Metal have been through a few technology stacks in thriving businesses and noticed a recurring theme and problem. Three boxes become fifty, ad-hoc nodes are spun up for testing, special slaves are provisioned for data analysis, applications are careless with resources and a new service quickly becomes a platform-wide single point of failure. Moving parts increase exponentially and so do potential points of failure.</p>

<p>Engineering, operations and support teams often have no clue what runs where, or what the dependencies are between them. This is especially true for fast growing businesses that reach a  critical mass - teams tend to become more specialized, information silos are common and thus total system visibility is also quite narrow. Having good knowledge of your runtime (or even just a perception) is instrumental in making informed decisions for releases, maintenance, capacity planning and discovering potential problems ahead of time. Prediction only makes sense once there&rsquo;s a good perception of &ldquo;current state&rdquo; in place to minimize the rendering of fail whales.</p>

<h2>Web operations and awareness</h2>

<p>Operations isn&rsquo;t about individuals, but teams. The goal is to have information exchange between team members and other teams being as passive as possible. Monitoring, alerting and other push based systems help a lot with passive learning about deployments. It&rsquo;s mostly effortless and easy for individuals to build up knowledge and trends over time.</p>

<p>However, when we actively need to search for information, we can only search for what we already know exists. It&rsquo;s impossible to find anything we&rsquo;re not aware of. Given the primary goal of an operations team is platform stability in the face of changes, time to resolution (TTR) is always critical and actively seeking out information when under pressure is a luxury.</p>

<p>Historically a systemwide view has always been the territory of the CTO, operations team and perhaps a handful of platform or integration engineers. Inline with devops culture, we need to acknowledge this disconnect and explore solutions for raising situation awareness of critical systems for all concerned.</p>

<h2>And now</h2>

<p>Take a minute and ponder the following :</p>

<ul>
<li>How well do you think you know your systems?</li>
<li>Are developers able to infer potential release risks themselves?</li>
<li>When things go south, how well informed is your support team and what information can they give customers?</li>
<li>Are you comfortable releasing at any time?</li>
</ul>


<p>In our next post, we&rsquo;ll explore some common components, variables and events required for being &ldquo;on top&rdquo; of your stack. In the meantime, what causes you the most pain when trying to keep up with your production systems? What would you write a blank cheque for? :-)</p>

<p><a href="https://news.ycombinator.com/item?id=6332734">Discuss on Hacker News</a>.</p>
]]></content>
  </entry>
  
</feed>
