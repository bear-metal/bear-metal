<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bear Metal]]></title>
  <link href="http://bearmetal.eu/theden/atom.xml" rel="self"/>
  <link href="http://bearmetal.eu/"/>
  <updated>2014-07-07T12:38:09+01:00</updated>
  <id>http://bearmetal.eu/</id>
  <author>
    <name><![CDATA[Bear Metal OÜ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Do you know the biggest reason for why enterprise software sucks?]]></title>
    <link href="http://bearmetal.eu//theden/do-you-know-the-biggest-reason-why-enterprise-software-sucks/"/>
    <updated>2014-01-15T11:43:00+00:00</updated>
    <id>http://bearmetal.eu//theden/do-you-know-the-biggest-reason-why-enterprise-software-sucks</id>
    <content type="html"><![CDATA[<p><em>We all know the story. Your company was going to get this big new shiny ERP software. It was going to replace a third of the workforce in the company, cut the costs in half and make everyone happy. In reality the project went two years over schedule, cost three times as much as envisioned, and the end result was a steaming pile of shit.</em></p>

<p><a href="http://www.flickr.com/photos/53326337@N00/8043877054/"><img src="http://farm9.staticflickr.com/8453/8043877054_883963cf80_c.jpg" alt="" /></a></p>

<p><small>Photo by <a href="http://www.flickr.com/photos/53326337@N00/8043877054/">Quinn Dombrowski</a>, used under the Creative Commons license.</small></p>

<p>At this point started the blame-throwing. The provider duped the client with waterfall and exorbitant change fees. The buyer didn’t know how to act as a client in an information system project. The specs weren’t good/detailed/strict/loose enough. The consultants just weren’t that good in the first place. On and on and on.</p>

<p>While one or more of the above invariably are true in failed software projects, there’s one issue that almost each and every failed enterprise software project has in common: <em>the buyers were not (going to be) the users of the software</em>.</p>

<p>This simple fact has huge implications. Ever heard that “the client didn’t really know what they wanted”? Well, that’s because they didn’t. Thus, most such software projects are built with something completely different than the end user in mind. Be it the ego of the CTO, his debt to his mason brothers who happen to be in the software business<sup id="fnref:many-horses"><a href="#fn:many-horses" rel="footnote">1</a></sup>, or just the cheapest initial bid<sup id="fnref:nevermind"><a href="#fn:nevermind" rel="footnote">2</a></sup>. In any case, it’s in the software provider’s best interest to appeal to the decisionmaker, not the people actually using the system.</p>

<p>Of course, not every software buyer is as bad as described above. Many truly care about the success of the system and even its users. If for no other reason, at least because it has a direct effect on the company’s bottom line. But even then, they just don’t have the first-hand experience of working in the daily churn. They simply can’t know what’s best for the users. Of course, this gets even worse in the design-by-committee, big-spec-upfront projects.</p>

<p>Since it’s not very likely that we could change the process of making large software project purchases any time soon, what can we as software vendors do? One word: <em>empathy</em>. If you just take a spec and implement it with no questions asked, shame on you. You deserve all the blame. Your job is not to implement what the spec says. Heck, your job isn’t even to create what the client wants. Your job is to build what the client – no, the end users – need. For this – no matter how blasphemous it might sound to an engineer – you have to actually <em>talk</em> to the people that will be using your software.</p>

<p>This is why it’s so important to put the software developers to actually do what the end-users would. <strong>If you’re building call-center software, make the developers work in the call center a day or a week. If you’re building web apps, make the developers and designers work the support queue, don’t just outsource it to India.</strong></p>

<p>There is no better way to understand the needs for software you’re building than to talk directly to its users or use it yourself for real, in a real-life situation. While there aren’t that many opportunities to dog-fooding when building (perhaps internal) enterprise software for a client, there’s nothing preventing you from sending your people to the actual cost center. Nothing will give as much insight to the needs and pains of the actual users. No spec will ever give you as broad a picture. No technical brilliance will ever make up for lacking domain knowledge. And no client will ever love you as much as the one in the project where you threw yourself (even without being asked) on the line of fire. That’s what we here at Bear Metal insist on doing at the start of every project. I think you should, too.</p>

<hr />

<p><em>We at Bear Metal have some availability open for short and mid-term projects. If you’re looking for help building, running, scaling or marketing your web app,  <a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#105;&#110;&#102;&#111;&#064;&#098;&#101;&#097;&#114;&#109;&#101;&#116;&#097;&#108;&#046;&#101;&#117;">get in touch</a>.</em></p>

<div class="footnotes">
  <ol>
    <li id="fn:many-horses">
      <p>It’s surprising how often the same people actually represent both the buyer and the seller. This happens all the time e.g. in the patient care systems projects.<a href="#fnref:many-horses" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:nevermind">
      <p>Nevermind that the cheapest initial bid almost always balloons to something completely different in the end.<a href="#fnref:nevermind" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let Your Data Tell a Story]]></title>
    <link href="http://bearmetal.eu//theden/let-your-data-tell-a-story/"/>
    <updated>2013-09-24T16:57:00+01:00</updated>
    <id>http://bearmetal.eu//theden/let-your-data-tell-a-story</id>
    <content type="html"><![CDATA[<script async="" class="speakerdeck-embed" data-id="39c500c005dc01314f705605cd4f70bc" data-ratio="1.37081659973226" src="http://bearmetal.eu//speakerdeck.com/assets/embed.js"></script>

<p><em>This is a talk I gave at Monitorama.eu in Berlin, September 19, 2013.</em></p>

<p>Did you know that bear is Bär in German? Which, on the other hand, is berry in Swedish, and bears obviously eat berries as breakfast. Meanwhile, a berry is Beer in German, which does sound very German when you think about it. But I’m already digressing.</p>

<p>Germans, and the Berliner especially, are of course very fond of bears, which is the only explanation I could come up with for why I was chosen<sup id="fnref:as-a-cubby"><a href="#fn:as-a-cubby" rel="footnote">1</a></sup> to give this talk here. In particular, they like polar bears here – Eisbären in the local lingo. But it wasn’t always like that.</p>

<p>In 1930 in Stuttgart, an innkeeper threw a large feast serving smoked polar bear ham. The result: 100 falling ill and 13 dead because of trichinosis caused by <a href="https://en.wikipedia.org/wiki/Trichinella_spiralis">Trichinella spiralis</a>, a little fella that looks like this:</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/e/e8/Trichinella_larv1_DPDx.JPG" alt="" /></p>

<p>The moral of the story: always cook your bear meat well done. And now, after hearing this tale, I’ll guarantee you, you will remember it every time you’re cooking polar bear meat. And <em>that</em> is the power of a story.</p>

<p>We’ll get back to the topic of storytelling in a little bit, but let’s first have a quick look at what we know about the human brain and mind.</p>

<h2 id="duality-of-the-mind--a-farce-in-2-acts">Duality of the mind – a farce in 2 acts</h2>

<h3 id="act-1-brain-pixels-and-the-human-ram">Act 1: Brain pixels and the human RAM</h3>

<p>In 1998, psychologists Daniel Simons and Daniel Levin carried out <a href="https://www.youtube.com/watch?v=FWSxSQsspiQ">an experiment</a>. They hired a professional actor to approach people walking on the street and ask them to give them route instructions on a map. While the targets were looking at the map intensely, something weird happened. Two workmen carrying a door walked between the helper and the actor. The door, of course, was smoke and mirrors. Behind it, the person who had asked for help, was swapped to another person. Most of the targets did not notice. The actor was swapped to another with different hair color, then different clothes, and finally from a man to a woman. And yet, more than half of the subjects failed to notice that they were talking to a completely different person.</p>

<p>What this tells us is that our attention is very, very limited. This comes mostly down to two things.</p>

<h4 id="our-focus-of-vision-is-tiny">Our focus of vision is tiny</h4>

<p>The human vision is a bit like a digital camera. Light is directed through a lens to a “sensor”, the retina. However, this human CMOS is nothing like the one made of silicon. While a digital camera sensor has an even grid of pixels, the brain pixels are anything but. In the center of our vision, called as fovea, we can resolve as much as 100 pixels in the area of a needle pin, at arm’s length. This is more or less where the so-called retina screen resolution comes from.</p>

<p>However, the fovea, at that same length, is only about the size of a thumbnail. Outside that, the “pixel density” goes down really fast. In the periphery of our vision, we can’t really detect any details at all.</p>

<p><a href="http://www.flickr.com/photos/jarkko/9911880963/"><img src="http://farm6.staticflickr.com/5502/9911880963_2790398f39_h.jpg" alt="" /></a></p>

<p>The obvious question here is, how then can we process a more or less sharp image of our surroundings? The answer is: we don’t. But we cheat. We move our eyes rapidly to scan our vision, which creates an illusion of a sharper image than it really is.</p>

<p>But this isn’t such an issue, is it? I mean, we can just memorize what we just saw to create a more comprehensive picture of what we just saw. Right? Well, yes and no.</p>

<h4 id="our-working-memory-is-very-small">Our working memory is very small</h4>

<p>We can, indeed, store items in what is called short-term or working memory. To stay in computer metaphors<sup id="fnref:real-to-not"><a href="#fn:real-to-not" rel="footnote">2</a></sup>, it is a bit like RAM. It is fast, but limited, and when something new goes into it and it gets full, something else must be thrown out. However, unlike its tech counterpart, working memory in us humans has not grown during the last years or even centuries. It is still ridiculously small: somewhere around 3-4. No, I don’t mean 3-4 gigs, or even megs. Hell, not even kilobytes or bytes. 3-4, period.</p>

<p>Let’s look at a short demo video of this. Please don’t continue reading this article further before you have watched it. It takes less than two minutes.</p>

<iframe width="560" height="315" src="http://bearmetal.eu//www.youtube.com/embed/IGQmdoK_ZfY" frameborder="0" allowfullscreen=""></iframe>

<p>Did you notice the gorilla (or one of the other changes if you had seen the original gorilla video beforehand)? About 50% of people don’t, even though they are looking several times (this was proven with eye tracking equipment) right at the beast, which is quite an amazing demonstration of the limits of our attention.</p>

<p>So what does this lack of attention mean to us as graphic and visualization designers? To put it short, it means the world. As an example, you can’t put two things the viewer should be comparing against each other very far from each other, because the viewer just can’t keep the other one in her memory long enough to make the comparison. Thus the first rule of thumb is: <em>make comparisons viewable with as few eye fixations as possible, preferably one</em>.</p>

<p>The second rule is: <em>maximize the data-ink ratio</em>. The ratio, coined by the visualization guru Edward Tufte, means the amount of data conveyed by the visualization divided by the amount of “ink” used. To put it in another way, the less stuff you have that is only there for visual looks and doesn’t have any particular meaning, the better. Good examples of this are needless and redundant color coding, the infamous PowerPoint pattern backgrounds<sup id="fnref:just-ugly"><a href="#fn:just-ugly" rel="footnote">3</a></sup>, and 3D effects now running amok in the Keynote world. Each of these makes the cognitive load of the viewer higher by fighting for her attention, which then leaves fewer resources in her brain left to actually make sense of the <em>real</em> information in the graph.</p>

<p>The whole field of human attention and cognitive science is huge both in general and applied to visuals in particular. We don’t have the opportunity to delve into it deeper here, but here are some pointers for you to learn more:</p>

<ul>
  <li><a href="http://www.interaction-design.org/encyclopedia/data_visualization_for_human_perception.html">Data Visualization for Human Perception</a> by Stephen Few</li>
  <li><a href="http://www.amazon.com/Visual-Thinking-Kaufmann-Interactive-Technologies/dp/0123708966">Visual Thinking: For Design</a> by Colin Ware</li>
  <li><a href="http://www.amazon.com/Invisible-Gorilla-Intuition-Deceives-ebook/dp/B003P9XE56/">The Invisible Gorilla</a> by Christopher Chabris and Daniel Simons</li>
</ul>

<h3 id="act-2-thinking-fast-and-slow">Act 2: Thinking, fast and slow</h3>

<p>In The Magazine, one the several things Marco Arment has sold during the past year, pediatrician Saul Hymes recently wrote an article called <a href="http://the-magazine.org/15/give-it-your-best-shot">Give It Your Best Shot</a>. In the article, Hymes writes about one of his patients, a three-week-old girl who went dead because of bacterial meningitis, an illness passed to him by her unvaccinated older brother.</p>

<p>It was all of course preventable. There has been a vaccine against the bacteria in question, Haemophilus influenzae type b since 1984. So afterwards Hymes asked the mother of the two whether she’d now “give her children the benefit of modern medicine’s vaccinations.”. The answer was no.</p>

<p>What’s going on here?</p>

<p>In his best-selling book, <a href="http://www.amazon.com/Thinking-Fast-and-Slow-ebook/dp/B00555X8OA/">Thinking, fast and slow</a>, the Nobel laureate psychologist Daniel Kahneman lays out his theory of human thinking, splitting it into two systems, which he calls quite unimagitatively systems 1 and 2. System 1 is fast, intuitive, automatic and direct. System 2 is slow, analytical, and not activated in many day-to-day tasks at all. It is also lazy, trusting the intuition of system 1 much more than it should. It wouldn’t be such a problem if system 1 wasn’t as prone to many errors and biases as it is. It draws conclusions long before the conscious mind does. What makes matters worse, we almost always think we made these intuitive, erroneous decisions knowingly.</p>

<p>And this, in many ways, is what is going on in the heads of the people in the anti-vaccination community. Let’s look at some of the biases potentially at play here.</p>

<h4 id="availability-bias">Availability Bias</h4>

<blockquote>
  <p><em>We prefer wrong information to no information.</em></p>

  <p>– Rolf Dobelli in <a href="http://www.amazon.com/The-Thinking-Clearly-Rolf-Dobelli/dp/0062219685">The Art of Thinking Clearly</a></p>
</blockquote>

<p>Because of information readily available to us, we often make totally erroneous assumptions of how common or proven it actually is. If our grandfather smoked a lot but still lived to 100-years-old, we easily think that smoking can’t be that bad for you. Or if a celebrity in the TV claims that her son got autism from vaccinations, hey, why not? We use statements like these to prove something, but they don’t of course prove anything. <strong>The plural form of ‘anecdote’ is not ‘data’.</strong></p>

<p>Because of availability bias, we systematically overestimate the risk of catastrophes we see often in the media, such as terrorist attacks or natural disasters, and underestimate the boring, but much more likely causes of death, such as diabetes and cancers. We attach much more likelihood to spectacular outcomes. And what could be more spectacular than a centerfold model and her son with an illness obviously caused by greedy pharma companies and their conspiracies with public health organizations?</p>

<h4 id="conjunction-fallacy">Conjunction Fallacy</h4>

<p>Conjunction fallacy means that the more vividly something is presented, the more likely it is for us to believe it is the truth. At intuitive level, we have a soft spot for plausible stories.</p>

<p>So when Jenny McCarthy goes to Oprah and tells about her son that “My science is Evan, and he’s at home. That’s my science”, no matter that…</p>

<ul>
  <li>the single study combining vaccines to autism has long since been disproven, its author has lost his doctor’s license for fraud, and Lancet has finally published a retraction, and that…</li>
  <li>based on some evidence, her son’s (who supposedly was cured from autism in 2010 through diet and other means) symptoms point to Landau-Kleffner Sydrome or, in layman’s terms, delayed development, not autism,…</li>
</ul>

<p>…people still cry and clap their hands. As Hymes writes,</p>

<blockquote>
  <p>“To paraphrase George Lucas: So this is how science dies — to thunderous applause? In the court of public opinion, data, and statements, and science are no match for an emotional parent and her child.”</p>
</blockquote>

<h4 id="story-fallacy">Story Fallacy</h4>

<p>We want our lives to follow a tight-nit story that is easy to follow. We talk about understanding surprising events, but that’s not really true. We simply build the meaning into them afterwards.</p>

<p>Media is a champion at this. Just think about the rampant “Apple is doomed, just like with PCs in the 1980’s” narrative. No matter what the facts say, the tech journalists who subscribe to the above notion will distort and retrofit them to their preferred narrative. Hollywood is of course another master at it and this obviously gives an edge to McCarthy over her opponents, the science community who try to convince the public with hard data and statistics.</p>

<p>Unfortunately in this case, stories attract us (and you’ll soon learn why) while the abstract makes us bored out of our minds. Thus, entertaining but irrelevant issues are often prioritized over relevant facts.</p>

<h4 id="confirmation-bias">Confirmation Bias</h4>

<p>Confirmation bias means that we systematically ignore and dismerit facts and opinions that disagree with our own beliefs and worldviews. If we really like BMW’s, we very easily just disregard test articles that give them bad grades and eagerly read through every word in pieces that adore them. The more strongly held a belief is, the stronger the bias is as well.</p>

<p>When we combine these four biases, it’s not so hard to understand why the science community has a hard time convincing the McCarthys of the world. As a result, there have recently been several outbreaks of measles in the US, something that already was completely eliminated from the country. The cases have almost without exception happened – like <a href="http://www.npr.org/2013/09/01/217746942/texas-megachurch-at-center-of-measles-outbreak">recently in North Texas</a> – in vaccine-skeptical communities.</p>

<p>The anti-vaccination community is an extreme example, of course. I mean, we’re mostly talking about religious whackos, right? We, who are pro-science, would never succumb to such fallacies, right? Let me tell you about another cognitive bias.</p>

<h4 id="the-overconfidence-effect">The Overconfidence Effect</h4>

<p>As proven over and over again, we systematically overestimate our knowledge, talent and our ability to predict. And not just by a little bit but on a giant scale. The effect doesn’t deal with whether we’re correct or wrong in single estimates. Rather, it measures the difference between what we know and what we think we know. The most surprising thing about the effect is that experts are no less susceptible to it than normal people – on the contrary. As Dobelli writes:</p>

<blockquote>
  <p>If asked to forecast oil prices in five years time, an economics professor will be as wide of the mark as a zookeeper will. However, the professor will offer his forecast with certitude.</p>
</blockquote>

<h3 id="the-positive-side-of-stories">The positive side of stories</h3>

<p>But let’s not be negative here. The flipside of all this is that stories are a very powerful way to get your point across and people to remember what you’re trying to teach them. Why is this?</p>

<p>Quite simply, our brains are <a href="http://lifehacker.com/5965703/the-science-of-storytelling-why-telling-a-story-is-the-most-powerful-way-to-activate-our-brains">evolutionarily wired to respond strongly to stories</a>. When we listen to a presentation with mostly boring bullet points, it hits the language processing areas of the brain, where we simply decode words into meaning. And then what? Nothing.</p>

<p>On the other hand, when we’re told stories, the aforementioned parts are not the only ones that fire. Any other areas in our brain that we’d use when experiencing the events of the story are as well. So if we hear a story about a delicious dish, our sensory cortex gets fired up. If the story is about action sports, our motor cortex is activated. Thus, a good story can put our whole brains to work.</p>

<p>Because of this, in a way we’re synchronizing our brains with our listeners. As Uri Hasson from Princeton says:</p>

<blockquote>
  <p>“When the woman spoke English, the volunteers understood her story, and their brains synchronized. When she had activity in her insula, an emotional brain region, the listeners did too. When her frontal cortex lit up, so did theirs. By simply telling a story, the woman could plant ideas, thoughts and emotions into the listeners’ brains.”</p>
</blockquote>

<p>So what do you need for a good story. Copyblogger <a href="http://www.copyblogger.com/marketing-stories/">lists the following five things</a>.</p>

<ol>
  <li>A hero</li>
  <li>A goal</li>
  <li>An obstacle</li>
  <li>A mentor</li>
  <li>A moral</li>
</ol>

<p>Granted, telling stories visually is much harder than verbally. It should not be treated as impossible, though. After all, movies and cartoons are to a large degree visual. So while the above five points are mostly meant for verbal storytelling, keeping them in mind even when weaving narrative with visualization can be of huge help.</p>

<p>It is important to build continuum, a narrative to your visualizations. The information presented needs to be integrated, rather than a bunch of unrelated pieces. You also want to create relevant emotions and affect to your presentation, and here it helps to link it to the viewers existing knowledge. However you do it, try to make your message more memorable and thus likely to impact behavior.</p>

<p>And whatever you do, keep in mind both a story and a visualization has to make sense.</p>

<p><a href="http://wtfviz.net/post/61791256708/inverse-relationship"><img src="http://25.media.tumblr.com/38972b1522b97f4aec2de97161eac2d9/tumblr_msz2xaFSmK1sgh0voo1_1280.png" alt="" /></a></p>

<p>The above graph courtesy of <a href="http://wtfviz.net/">WTF Visualizations</a>.</p>

<p>And if you’re still convinced you can’t tell stories with visualizations, watch <a href="http://www.ted.com/talks/hans_rosling_shows_the_best_stats_you_ve_ever_seen.html">the TED talks by Hans Rosling</a>.</p>

<p>So, how did Saul Hymes solve the problem of fighting a convincing, storytelling opponent? By telling stories himself. So while he still quoted the relevant stats and facts about the risks of taking vs not taking vaccines, he also started telling vibrant, vivid stories of individual kids dying or going deaf in his hands. After all, he didn’t have to convince people that taking vaccines is not dangerous. He had to convince them that <em>not</em> taking them <strong>is</strong>. And that is, of course, easy with a meaty story.</p>

<h2 id="in-closing">In closing</h2>

<p>I want you to remember two things from this article.</p>

<ol>
  <li>Our vision and short-term memory – and thus our attention – capacity are very limited. To present successful visualizations, we have to keep this in mind, plan for it and help the cognition of the viewers with cues.</li>
  <li>Storytelling is not important (just) because it is entertaining. It is important because it works – it makes people understand and remember our lessons better. This power might be based on fallacies but it is still very much a real effect that you can and should use to do good.</li>
</ol>

<p>And wait, there’s more. I’ll just leave this thought here for you to ponder:</p>

<p><strong>If you’re into data visualization, you’re not in the data business – you’re in the human communications business.</strong></p>

<p>Visualization is just a tool to attain goals. Keep that in mind.</p>

<div class="footnotes">
  <ol>
    <li id="fn:as-a-cubby">
      <p>As a Bear Metal cubby.<a href="#fnref:as-a-cubby" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:real-to-not">
      <p>Isn’t it awesome to describe real, natural things with metaphors from the tech world that no one would have understood just a few decades ago?<a href="#fnref:real-to-not" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:just-ugly">
      <p>It is fair to ask why they are provided in the first place. They certainly don’t make the graphs look any better either, quite the contrary.<a href="#fnref:just-ugly" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Are you flying blind – How to Regain Control of Production Systems with the Help of Situation Awareness?]]></title>
    <link href="http://bearmetal.eu//theden/situation-awareness/"/>
    <updated>2013-09-03T16:57:00+01:00</updated>
    <id>http://bearmetal.eu//theden/situation-awareness</id>
    <content type="html"><![CDATA[<div class="bogus-wrapper"><notextile><figure>
      <p><a href="http://www.flickr.com/photos/robbn1/3391187126/"><img src="http://farm4.staticflickr.com/3454/3391187126_4e62f6a374_b.jpg" alt="" /></a></p>

      <figcaption>
        <p>Photo by <a href="http://www.flickr.com/photos/robbn1/3391187126/">Robb North</a></p>
      </figcaption>
    </figure></notextile></div>

<p>A few months of work during a sabbatical yielded a product that nailed a problem in the preventative healthcare space. After a freemium window, the product gained good market traction and you spawn a new company with three coworkers. Customers are raving, sales trends are on the up, the engineering team is growing and there are conceptual products in the pipeline.</p>

<p>Three months down the line, there are 4 production applications, hordes of paying customers, a few big contracts with strict SLAs (service-level agreements) and enough resources to spin off a presence in Europe. A new feature that combines these products into a suite is slated for release. Engineering hauled ass for 2 months and sales is super stoked to be able to pitch it to customers.</p>

<h2 id="shipping">Shipping</h2>

<p>A few days before the feature release a set of new servers is provisioned to buffer against the upcoming marketing push. Due diligence on various fronts was completed, mostly through static analysis of the current production stack by various individuals. Saturday morning at 1am PST they deploy during a window with a historically low transaction volume. Representatives of a few departments sign off on the release, although admittedly there are still dark corners and the OK is mostly based off a few QA passes. Champagne pops, drinks are being had and everyone calls it a day. But then…</p>

<h2 id="when-things-go-south">When things go south</h2>

<p>At 9am PST various alerts flood the European operations team - only 25% of the platform’s available, support is overwhelmed and stress levels go up across the board. Some public facing pages load intermittently, MySQL read load is sky high and application log streams are blank. This deployment, as with most naive releases, was flying blind. A snapshot of a working system prior to release isn’t of much value if it can’t be easily reproduced after rollout for comparison.</p>

<p>Based on assumptions about time, space and other variables there was a total lack of <strong>situation awareness</strong> and thus no visibility into expected impact of these changes. Running software that pays the bills is today more important than a flashy new feature. However, one must move forward and there are processes and tools available for mitigating risk.</p>

<h2 id="what-is-situation-awareness">What is situation awareness?</h2>

<p>Situation awareness can be defined as an engineering team’s knowledge of both the internal and external states of their production systems, as well as the environment in which it is operating. Internal states refer to health checks, statistics and other monitoring info. The external environment refers to things we generally can’t directly control: Humans and their reactions; hosting providers and their networks; acts of god and other environmental issues.</p>

<p>It’s thus <em>a snapshot in time of system status that provides the primary basis for decision making and operation of complex systems</em>. Experience with a given system gives team members the ability to remain aware of everything that is happening concurrently and to integrate that sense of awareness into what they’re doing at any moment.</p>

<h2 id="how-situation-awareness-could-have-helped">How situation awareness could have helped?</h2>

<p>The new feature created a dependency tree between 4 existing applications, a lightweight data synchronization service (Redis) and the new nodes that were spun up. Initial investigation and root cause analysis revealed that the following went wrong:</p>

<ul>
  <li>The Redis server was configured for only 1024 connections and it tanked over when backends warmed up as the client connection was lazily initialized.</li>
  <li>Initial data synchronization (cache warmup) put excessive load on MySQL and other data stores also used for customer facing reporting.</li>
  <li>The data payloads used for synchronization were often very large for outlier customers, effectively blocking the Redis server’s event loop, also causing memory pressure.</li>
  <li>The new nodes were spun up with a wrong Ruby major version and also missed critical packages required for normal operations.</li>
  <li>A new feature that rolls the “logger” utility into some core init scripts piggybacked on this release. A syntax error fubar’ed output redirection and thus there weren’t any log streams.</li>
</ul>

<p>Without much runtime introspection in place, it was very difficult to predict what the release impact would be. Although not everything could be covered ahead of time for this release, even with basic runtime analysis, monitoring and good logging it would have been possible to spot trends and avoid issues bubbling up systematically many hours later.</p>

<p>Another core issue here is the “low traffic” release window. It’s often considered good practice to release during such times to minimize fallout for the worst case, however it’s sort of akin to commercial Boeing pilots only training on Cessnas. Any residual and overlooked issues tend to also only surface hours later when traffic ramps up again. This divide between cause and effect complicates root cause analysis immensely. You’d want to be able to infer errors from the system state, worst case QA or an employee and most definitely not customers interacting with your product at 9am.</p>

<p>One also cannot overlook the fact that suddenly each team now had a direct link with at least 3 other applications, new (misconfigured) backends and Redis at this point in time. Each team however only still mostly had a mental model of a single isolated application.</p>

<h2 id="why-situation-awareness-is-so-important">Why situation awareness is so important?</h2>

<p>We at Bear Metal have been through a few technology stacks in thriving businesses and noticed a recurring theme and problem. Three boxes become fifty, ad-hoc nodes are spun up for testing, special slaves are provisioned for data analysis, applications are careless with resources and a new service quickly becomes a platform-wide single point of failure. Moving parts increase exponentially and so do potential points of failure.</p>

<p>Engineering, operations and support teams often have no clue what runs where, or what the dependencies are between them. This is especially true for fast growing businesses that reach a  critical mass - teams tend to become more specialized, information silos are common and thus total system visibility is also quite narrow. Having good knowledge of your runtime (or even just a perception) is instrumental in making informed decisions for releases, maintenance, capacity planning and discovering potential problems ahead of time. Prediction only makes sense once there’s a good perception of “current state” in place to minimize the rendering of fail whales.</p>

<h2 id="web-operations-and-awareness">Web operations and awareness</h2>

<p>Operations isn’t about individuals, but teams. The goal is to have information exchange between team members and other teams being as passive as possible. Monitoring, alerting and other push based systems help a lot with passive learning about deployments. It’s mostly effortless and easy for individuals to build up knowledge and trends over time.</p>

<p>However, when we actively need to search for information, we can only search for what we already know exists. It’s impossible to find anything we’re not aware of. Given the primary goal of an operations team is platform stability in the face of changes, time to resolution (TTR) is always critical and actively seeking out information when under pressure is a luxury.</p>

<p>Historically a systemwide view has always been the territory of the CTO, operations team and perhaps a handful of platform or integration engineers. Inline with devops culture, we need to acknowledge this disconnect and explore solutions for raising situation awareness of critical systems for all concerned.</p>

<h2 id="and-now">And now</h2>

<p>Take a minute and ponder the following :</p>

<ul>
  <li>How well do you think you know your systems?</li>
  <li>Are developers able to infer potential release risks themselves?</li>
  <li>When things go south, how well informed is your support team and what information can they give customers?</li>
  <li>Are you comfortable releasing at any time?</li>
</ul>

<p>In our next post, we’ll explore some common components, variables and events required for being “on top” of your stack. In the meantime, what causes you the most pain when trying to keep up with your production systems? What would you write a blank cheque for? :-)</p>

<p><a href="https://news.ycombinator.com/item?id=6332734">Discuss on Hacker News</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It’s not about us, it’s about you (and not really about you, either)]]></title>
    <link href="http://bearmetal.eu//theden/its-not-about-us-its-about-you/"/>
    <updated>2013-08-14T15:51:00+01:00</updated>
    <id>http://bearmetal.eu//theden/its-not-about-us-its-about-you</id>
    <content type="html"><![CDATA[<div class="bogus-wrapper"><notextile><figure>
      <p><a href="http://www.flickr.com/photos/22711505@N05/8987537991/in/photolist-eGctVz-Rw9Az-RVB46-d1oXub-3od3r2-5maP4G-d1pEjS-2z4E45-7zg9zD-dk9TPx-dk9ViL-62gdUK-cbhisA-dk9VoE-6sjCDX-6sjCQ4-8EcAxc-d1pPAm-aSuUEX-7WR5Va-9SMEDS-mzFjV-9SrEU9-5bvnMg-bbvqpn-6S8uV4-6ScRvQ-8ypVzY-bbvqoz-7YzNHn-eecQ8W-d1pDv9-6QYGRg-62QwZR-fbZJU2-bXZ3iw-hZ9cW-hZ9cX-hZa5p-hZa5q-5iHQyg-4SnuGn-g5GYQ-9dbkFa-b5vRQc-d1pF7C-5oG5br-bcHysn-c3QYZW-c3QYiN-749XSZ/"><img src="http://farm3.staticflickr.com/2859/8987537991_795f7568ca_h.jpg" alt="" /></a></p>

      <figcaption>
        <p>Photo by <a href="http://www.flickr.com/photos/22711505@N05/8987537991/in/photolist-eGctVz-Rw9Az-RVB46-d1oXub-3od3r2-5maP4G-d1pEjS-2z4E45-7zg9zD-dk9TPx-dk9ViL-62gdUK-cbhisA-dk9VoE-6sjCDX-6sjCQ4-8EcAxc-d1pPAm-aSuUEX-7WR5Va-9SMEDS-mzFjV-9SrEU9-5bvnMg-bbvqpn-6S8uV4-6ScRvQ-8ypVzY-bbvqoz-7YzNHn-eecQ8W-d1pDv9-6QYGRg-62QwZR-fbZJU2-bXZ3iw-hZ9cW-hZ9cX-hZa5p-hZa5q-5iHQyg-4SnuGn-g5GYQ-9dbkFa-b5vRQc-d1pF7C-5oG5br-bcHysn-c3QYZW-c3QYiN-749XSZ/">Ron Cogswell</a></p>
      </figcaption>
    </figure></notextile></div>

<p>One of the saddest things to happen online was in 2007 when my all-time favorite author and presenter, Kathy Sierra, received death threaths and thus retreated from the public web. It also meant that she stopped writing her <a href="http://headrush.typepad.com">Creating Passionate Users</a> weblog, which had been a great inspiration for me for quite some time. Thank god she didn’t <a href="http://ejohn.org/blog/eulogy-to-_why/">pull a _why</a> on it.</p>

<p>While it’s more than six years since Kathy’s last blog post (is it really that long?), there is no reason we shouldn’t apply her lessons even in today’s online world.</p>

<p>Maybe the most famous mantra of Sierra was that in order to create passionate users you should make <em>them</em> kick ass. Sure, it’s nice if your UI boasts übercool 3D CSS transformations but if it doesn’t help your users shine, no one (well, except for some web geeks) will give a flying fuck.</p>

<p>She demonstrated this with the fact that very often companies spend a huge amount of effort and money to hone the living daylights off their marketing materials but don’t really put that much time into what actually helps their users: tutorials and user manuals. Of course this had helped her immensively by creating a market for the visual <a href="http://www.headfirstlabs.com">Head First</a> book series on O’Reilly that she curated.</p>

<p>Apple has for a long time been a good example of helping its users kick ass. The user manual of the old Final Cut Pro 7 was also a great introduction to the art of video editing<sup id="fnref:unfortunately"><a href="#fn:unfortunately" rel="footnote">1</a></sup>. Likewise, most of Apple ads show things you can do and <em>create</em> with their products, not just random people dancing around the pool.</p>

<p>People care about how they can kick ass <em>themselves</em> and they need to be able to learn it to capitalize on it. Nowadays it seems that companies are much more interested in giving people free apps and then using psychological tricks to milk money out of them than helping them shine. Which, coincidentally, brings us back to Kathy Sierra.</p>

<p>To my pleasant surprise, I last week learned that Kathy is back with the pseudonym <a href="https://twitter.com/seriouspony">Serious Pony</a>, and <a href="http://seriouspony.com/blog/">a new blog</a> of the same name. The first article, <a href="http://seriouspony.com/blog/2013/7/24/your-app-makes-me-fat">Your app makes me fat</a>, is of the same awesome quality as her old pieces. In it, she tackles head-on the aforementioned gamification trend and the <a href="http://youarenotsosmart.com/2012/04/17/ego-depletion/">ego depletion</a> tax it puts on us as app users.</p>

<p>To honor Kathy, we wanted to start this blog off by not talking about us ourselves, because <a href="http://youarenotsosmart.com/2012/04/17/ego-depletion/">Bear Metal</a> isn’t really about us, but you. And – assuming you are a developer, entrepreneur or content provider – not really about you either. It’s about who we (you and us) serve. Because without them there is no market, no audience, no need, no problems to solve, no pains to relieve. Your customers should be the ones that matter to you. And they don’t care about you or us. They care about whether your product can make them shine.</p>

<p>Can your product help <em>them kick ass</em>? <em>Does it</em>? Are you <em>communicating that effectively</em> to your current and potential customers? That is all that should matter.</p>

<div class="footnotes">
  <ol>
    <li id="fn:unfortunately">
      <p>Unfortunately this can’t be said about the manual of the new version, Final Cut Pro X.<a href="#fnref:unfortunately" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
